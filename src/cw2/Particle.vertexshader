#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 squareVertices;
layout(location = 1) in vec3 xyz;   // Position of the center of the particule
layout(location = 2) in vec3 color; // Position of the center of the particule

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 particlecolor;

// Values that stay constant for the whole mesh.
uniform vec3 CameraRight_worldspace;
uniform vec3 CameraUp_worldspace;
uniform mat4 VP; // Model-View-Projection matrix, but without the Model (the
                 // position is in BillboardPos; the orientation depends on the
                 // camera)

void main() {
  vec3 vertexPosition_worldspace =
      xyz + CameraRight_worldspace * squareVertices.x * 8.0 +
      CameraUp_worldspace * squareVertices.y * 8.0;

  // Output position of the vertex
  gl_Position = VP * vec4(vertexPosition_worldspace, 1.0f);

  // UV of the vertex. No special space for this one.
  UV = squareVertices.xy + vec2(0.5, 0.5);
  particlecolor = color;
}
